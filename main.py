import requests
import random
from bs4 import BeautifulSoup
import time
import os
import base64
from io import BytesIO
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36"
}

MAX_RETRIES = 1000
TIMEOUT = 100
BASE_URL = "https://infostart.ru/1c/articles/"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ---
TELEGRAM_TOKEN = "8114950949:AAF_pK08B4IL17I0PgKthvLvqmxeRWmOA4w"
TELEGRAM_CHAT = "@VsratiyIS"
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Hugging Face ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å API
HF_API_URL = "https://api-inference.huggingface.co/models/Salesforce/blip-image-captioning-base"
HF_TOKEN = "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"
HF_TIMEOUT = 60

# --- –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å URL —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç–∞—Ç—å–∏ ---
def get_random_article_url():
    for attempt in range(MAX_RETRIES):
        article_id = random.randint(1755375, 1755375)
        url = f"{BASE_URL}{article_id}/"
        try:
            response = requests.head(url, headers=HEADERS, timeout=TIMEOUT)
            if response.status_code == 200:
                logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è –Ω–∞–π–¥–µ–Ω–∞: {url}")
                return url
            else:
                logger.debug(f"‚ùå –°—Ç–∞—Ç—å—è {article_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–∫–æ–¥ {response.status_code})")
        except requests.exceptions.RequestException as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}: {e}")
        time.sleep(0.1)
    return None

# --- –§—É–Ω–∫—Ü–∏—è: –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ---
def get_images_from_article(url):
    try:
        response = requests.get(url, headers=HEADERS, timeout=TIMEOUT)
        if response.status_code != 200:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            return []

        soup = BeautifulSoup(response.text, 'html.parser')
        image_urls = []

        # –ü–æ–∏—Å–∫ –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for img in soup.find_all('img', src=True):
            src = img.get('src', '')
            if src:
                if src.startswith(('http://', 'https://')):
                    image_urls.append(src)
                elif src.startswith('/'):
                    image_urls.append(f"https://infostart.ru{src}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        filtered = [
            img for img in image_urls 
            if 'infostart.ru' in img 
            and 'no_avatar_forum' not in img
            and any(img.lower().endswith(ext) for ext in ['.jpg', '.jpeg', '.png', '.webp'])
        ]
        return list(set(filtered))
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}", exc_info=True)
        return []

# --- –§—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
def generate_image_caption(image_url):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(image_url, headers=HEADERS, timeout=TIMEOUT)
        if response.status_code != 200:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(response.content) > 3 * 1024 * 1024:  # 3 MB
            logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {len(response.content)//1024} KB")
            return None
            
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Hugging Face
        headers = {"Authorization": f"Bearer {HF_TOKEN}"}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response_hf = requests.post(
            HF_API_URL,
            headers=headers,
            data=response.content,
            timeout=HF_TIMEOUT
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response_hf.status_code == 200:
            result = response_hf.json()
            if isinstance(result, list) and len(result) > 0:
                caption = result[0].get('generated_text', '')
                logger.info(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {caption}")
                return caption
                
        elif response_hf.status_code == 503:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            try:
                error_data = response_hf.json()
                estimated_time = error_data.get('estimated_time', 30)
                logger.info(f"‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º {estimated_time} —Å–µ–∫—É–Ω–¥...")
                time.sleep(estimated_time + 5)
                return generate_image_caption(image_url)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            except:
                time.sleep(30)
                return None
                
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face ({response_hf.status_code}): {response_hf.text}")
            
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}", exc_info=True)
    return None

# --- –§—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ Telegram ---
def send_image_to_telegram(image_url, article_url):
    if not is_valid_image(image_url):
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Telegram
        img_response = requests.get(image_url, stream=True, timeout=15, headers=HEADERS)
        img_response.raise_for_status()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with BytesIO() as buffer:
            buffer.write(img_response.content)
            buffer.seek(0)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
            ai_caption = generate_image_caption(image_url)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = f"üìå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞—Ç—å–∏:\n{article_url}"
            if ai_caption:
                caption += f"\n\nü§ñ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é:\n{ai_caption}"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤
            caption = caption[:1024]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            files = {'photo': buffer}
            data = {'chat_id': TELEGRAM_CHAT, 'caption': caption}
            
            tg_response = requests.post(
                TELEGRAM_API,
                data=data,
                files=files,
                timeout=20
            )
            
            if tg_response.status_code == 200:
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram ({tg_response.status_code}): {tg_response.text}")
            
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}", exc_info=True)

def is_valid_image(url):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        clean_url = url.split('?')[0].lower()
        if not any(clean_url.endswith(ext) for ext in ('.jpg', '.jpeg', '.png', '.webp')):
            logger.warning(f"üö´ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {url}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        head_response = requests.head(url, headers=HEADERS, timeout=5)
        content_length = head_response.headers.get('Content-Length')
        if content_length and int(content_length) > 10 * 1024 * 1024:  # 10 MB
            logger.warning(f"üö´ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {int(content_length)//1024} KB")
            return False
            
        return True
    except:
        return False

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Telegram...")
    sent_count = 0

    while True:
        try:
            logger.info("\nüîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏...")
            article_url = get_random_article_url()
            if not article_url:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å—é. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
                continue

            images = get_images_from_article(article_url)
            logger.info(f"üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")

            if images:
                for img in images:
                    try:
                        logger.info(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img}")
                        send_image_to_telegram(img, article_url)
                        sent_count += 1
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {sent_count}")
                        time.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
                
                logger.info(f"üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {sent_count}")
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ–π...")
                time.sleep(300)  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ç—å–∏
            else:
                logger.warning("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                time.sleep(10)

        except KeyboardInterrupt:
            logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            time.sleep(30)

if __name__ == "__main__":
    main()
